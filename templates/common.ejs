// @ts-ignore
/* eslint-disable */
import type {
    ErrorResponse,
    SuccessResponse,
    FilterKeys,
    MediaType,
    ResponseObjectMap,
    OperationRequestBodyContent,
} from "openapi-typescript-helpers";
<%- pathAst %>
export type FetchResponse<T> =
    FilterKeys<SuccessResponse<ResponseObjectMap<T>>, MediaType>
    | FilterKeys<ErrorResponse<ResponseObjectMap<T>>, MediaType>;
type PickType<T, K extends string> = T extends { [key in K]: any }
    ? T[K]
    : never;
export type RequestType<P extends keyof paths,
    M extends keyof paths[P], Request extends paths[P][M] = paths[P][M], Params extends PickType<Request, 'parameters'> = PickType<Request, 'parameters'>> = {
    path: PickType<Params, 'path'>,
    query: PickType<Params, 'query'>,
    header: PickType<Params, 'header'>,
    cookie: PickType<Params, 'cookie'>,
    body: OperationRequestBodyContent<Request>,
    response: FetchResponse<Request>
};
// 生成请求方法
export function $$$<
    P extends keyof paths,
    M extends keyof paths[P],
    Fn extends (url: P, method: M) => any
>(url: P, method: M, fn: Fn): ReturnType<Fn> {
    return fn(url, method)
}
// 格式化url路径中的变量
export function formatPathVals(urlPath: string, keys: string[], vals: Record<string, string | number | (string | number)[]>) {
    return keys.length ? keys.reduce((str, key) => {
        let val = vals[key];
        if (Array.isArray(val)) {
            val = val.join(',')
        }
        delete vals[key];
        return str.replace(new RegExp("{?}".replace("?",key), 'g'), "" + val);
    }, urlPath) : urlPath
}
// 添加header头
export function setHeader(header: Headers, keys: string[], vals: Record<string, string | number | (string | number)[]>, isCookie = false) {
    return keys.length ? keys.reduce((h, key) => {
        let val = vals[key];
        if (Array.isArray(val)) {
            val.forEach(v => {
                const _v = encodeURIComponent(v);
                isCookie ? h.getSetCookie().push(`${key}=${_v}`) : h.append(key, `${_v}`);
            });
        } else {
            const _v = encodeURIComponent(val);
            isCookie ? h.getSetCookie().push(`${key}=${_v}`) : h.append(key, `${_v}`);
        }
        delete vals[key];
        return h;
    }, header) : header
}