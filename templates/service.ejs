// @ts-ignore
/* eslint-disable */
<%- `import {$$$, formatPathVals, setHeader, RequestType} from "./common";
${config.requestImport};` %>
<%_ apis.forEach((api)=>{ _%>
export const <%- api.name %> = {
	<%_ api.items.forEach((item)=>{ _%>
	<%_ const {definition,params,contentType = [],responseType = []} = item.metadata _%>
    /**
     * <%- definition.summary ?? "此处后端没有提供注释" %>
     <%_ if(definition.description){ _%>
     * @description <%- definition.description %>
     <%_ } _%>
     <%_ if(definition.deprecated){ _%>
     * @deprecated
     <%_ } _%>
     */
    <%- item.name %>: $$$(<%- JSON.stringify(item.path) %>, <%- JSON.stringify(item.method) %>, (url, method) => {
        type T = RequestType<typeof url, typeof method>;
        <%_ // 处理请求参数
			const paramsType = Object.keys(params).filter(type => type !== "body").map(type => format(params[type].all?'T["%s"]':`Omit<T["%s"],"${params[type].keys.join('" | "')}">`, type));
			const requestOptions = paramsType.length ? [`params: ${paramsType.join(" & ")}`] : [];
			if(params.body){
				requestOptions.push(`body: T["body"]`);
			}
            if(config.requestFnOtherParams&&config.requestFnOtherParams.length){
                config.requestFnOtherParams.forEach(({name,type})=>{
                    requestOptions.push(`${name}?: ${type}`);
                });
            }
            let resType="T['response']";
            if(responseType.length){
				switch(responseType[0]){
					case "arraybuffer":{
						resType = "ArrayBuffer";
						break;
					}
					case "blob":{
						resType = "Blob";
						break;
					}
					case "text":{
						resType = "string";
						break;
					}
				}
            }
		_%>
        return function (<%- requestOptions.join(", ") %>) {
		 <%_ if(contentType.length||params.header||params.cookie){ _%>
			const headers = new Headers();
			<%_ if(contentType.length){ _%>
			headers.append("Content-Type", <%- dump(contentType[0]) %>);
			<%_ } _%>
			<%_ if(params.header){ _%>
			setHeader(headers, <%- dump(params.header.keys) %>, params, false);
			<%_ } _%>
			<%_ if(params.cookie){ _%>
			setHeader(headers, <%- dump(params.cookie.keys) %>, params, true);
			<%_ } _%>
		<%_ } _%>
            return <%- config.requestFnName %><<%- resType %>>({
                url<%- params.path?.keys.length ? `: formatPathVals(url, ${JSON.stringify(params.path.keys)}, params)` : "" %>,
                method,
                <%_ if(params.query){ _%>
                params,
                <%_ } _%>
                <%_ if(params.body){ _%>
                data: body,
                <%_ } _%>
                <%_ if(params.cookie){ _%>
                withCredentials: true,
                <%_ } _%>
                <%_ if(contentType.length||params.header||params.cookie){ _%>
                headers: Object.fromEntries(headers.entries()),
                <%_ } _%>
                <%_ if(responseType.length){ _%>
                responseType: <%- dump(responseType[0]) %>,
                <%_ } _%>
            }<%- config.requestFnOtherParams?.length?`, ${config.requestFnOtherParams.map(({name})=>name).join(', ')}`:"" %>);
        }
    }),
    <%_ }) _%>
};
<%_ }) _%>
